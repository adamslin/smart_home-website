---
description: 
globs: 
alwaysApply: true
---
## Core Principles
- **Keep It Simple:** Use a functional approachâ€”no OOP patterns.
- **Functional Components Only:** Write all UI elements as functional React components.
- **Free Quota Compliance:** Ensure API calls, database operations, and MQTT usage stay within Cloudflare's free tier limits.
- When you start the app, you should check is port 3000 us occupiedl if so, kill it first.

## Tech Stack
- **Frontend:** Next.js (App Router) + Tailwind CSS + ShadCN/UI for a modern, fast UI.
- **Database:** Supabase pg for data persistence.
- **Messaging:** MQTT for real-time communication (publish & consume).
- **API:** Next.js Server Actions and API routes (`app/api/`).

## Component & Code Structure
- **Component Organization:**
  - **UI Components:** Reusable elements in `components/ui/`.
  - **Feature Components:** Self-contained components in `components/`.
  - **Server Components:** Fetch data server-side where applicable.
  - **Client Components:** For interactive UI elements only.
  - **Hooks:** Store reusable logic (e.g., `useMqtt`, `useDb`) in `hooks/`.
  
- **API Routes (App Router):**
  - Place API handlers inside `app/api/<route>/route.js`.
  - Use function-based handlers for request processing.
  - Keep API responses lightweight and efficient.

## State & Data Handling
- **Database Operations:** 
  - Use lightweight functions for DB queries [db.ts](mdc:db/db.ts).
  - Optimize queries to minimize Supabase free-tier usage.
  - Select only necessary columns in SQL queries instead of using SELECT *.

- **MQTT Messaging:** 
  - Implement functions for publishing and consuming MQTT messages (`lib/mqtt.util.ts`).
  - Keep messages efficient to avoid excessive bandwidth usage.

- **API Calls:** 
  - Define API handlers in `app/api/`.
  - Use **Server Actions** for database interactions.
  - Fetch client-side data with `useEffect` or `useSWR` when necessary.
  - Create batch API endpoints for related data to reduce HTTP requests.

## Configuration & Environment
- **Environment Variables:** Store sensitive settings (DB credentials, MQTT broker info) in `.env`.
- **Cloudflare Free Tier Consideration:** Optimize queries, reduce MQTT message frequency, and cache results where possible.

## Best Practices
- **Minimal Dependencies:** Use only essential packages to keep performance high.
- **Utility Functions:** Encapsulate shared logic in `lib/` (e.g., formatting, API helpers).
- **Efficient Styling:** Use Tailwind CSS utilities and ShadCN/UI components for a clean, responsive design.
- **Performance Optimization:** 
  - Use **React Server Components** where possible.
  - Minimize client-side rendering for better performance.
  - Avoid unnecessary API calls with caching strategies.
  - Use **Server Actions** for efficient, secure data mutations.
  - Add React's `cache()` function to server actions for automatic caching.
  - Implement proper `revalidatePath()` calls in all data mutations.
  - Use Next.js's static generation with appropriate revalidation periods.
  - Always implement consistent loading states with Skeleton components.
  - Reduce client-side polling frequency to minimize API requests.
  - Use local timestamp checking to prevent redundant data fetching.
  - Create suspense boundaries with proper fallback UI components.
  - Balance data fetching on server vs. client based on needs.
